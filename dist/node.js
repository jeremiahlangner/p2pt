import h from"bittorrent-tracker/lib/client/websocket-tracker";import u from"randombytes";import g from"events";import l from"simple-sha1";const a="^",d=16e3;class k extends g{constructor(e,n){super();this.announce=["wss://tracker.files.fm:7073/announce","wss://tracker.btorrent.xyz","wss://spacetradersapi-chatbox.herokuapp.com:443/announce","ws://tracker.files.fm:7072/announce"];this.trackers={};this.peers={};this.responseWaiting={};this.msgChunks={};this._identifier="";this._peerIdBuffer=u(20);this._peerId=this._peerIdBuffer.toString("hex");this._peerIdBinary=this._peerIdBuffer.toString("binary");this.announce=e||this.announce,this.identifier=n||this.identifier}set identifier(e){this._identifier=e,this.infoHash=l.sync(e).toLowerCase(),this._infoHashBuffer=Buffer.from(this.infoHash,"hex"),this._infoHashBinary=this._infoHashBuffer.toString("binary")}start(){this.on("peer",e=>{let n=!1;this.peers[e.id]||(n=!0,this.peers[e.id]={},this.responseWaiting[e.id]={}),e.on("connect",()=>{this.peers[e.id][e.channelName]=e,n&&this.emit("peerconnect",e)}),e.on("data",t=>{if(this.emit("data",e,t),t=t.toString(),t[0]===a)try{t=JSON.parse(t.slice(1)),e.respond=this._peerRespond(e,t.id);let s=this._chunkHandler(t);s!==!1&&(t.o&&(s=JSON.parse(s)),this.responseWaiting[e.id][t.id]?(this.responseWaiting[e.id][t.id]([e,s]),delete this.responseWaiting[e.id][t.id]):this.emit("msg",e,s),this._destroyChunks(t.id))}catch(s){console.error(s)}}),e.on("error",t=>{this._removePeer(e),console.warn("Error in connection to peer:",t)}),e.on("close",()=>{this._removePeer(e),console.log(`Connection to ${e.id} closed.`)})}),this.on("update",e=>{const n=this.trackers[this.announce.indexOf(e.announce)];this.emit("trackerconnect",n,this.getTrackerStats())}),this.on("warning",e=>{this.emit("trackerwarning",e,this.getTrackerStats())}),this._fetchPeers()}addTracker(e){if(this.announce.indexOf(e)!==-1)throw new Error("Tracker already added.");const n=this.announce.push(e);this.trackers[n]=new h(this,e),this.trackers[n].announce(this._defaultAnnounceOpts())}removeTracker(e){const n=this.announce.indexOf(e);if(n===-1)throw new Error("Tracker does not exist");this.trackers[n].peers=[],this.trackers[n].destroy(),delete this.trackers[n],delete this.announce[n]}_removePeer(e){if(!this.peers[e.id])return!1;delete this.peers[e.id][e.channelName],Object.keys(this.peers[e.id]).length===0&&(this.emit("peerclose",e),delete this.responseWaiting[e.id],delete this.peers[e.id])}send(e,n,t=""){return new Promise((s,f)=>{const i={id:t||String(Math.floor(Math.random()*1e5+1e5)),msg:typeof n=="object"?JSON.stringify(n):n,o:typeof n=="object"?1:null};try{if(!e.connected){for(const o in this.peers[e.id])if(e=this.peers[e.id][o],e.connected)break}this.responseWaiting[e.id]||(this.responseWaiting[e.id]={}),this.responseWaiting[e.id][i.id]=s}catch(o){return f(Error("Connection to peer closed"+o))}let c=0,r="";for(;i.msg.length>0;)i.c=c,r=i.msg.slice(d),i.msg=i.msg.slice(0,d),r||(i.last=!0),e.send(a+JSON.stringify(i)),i.msg=r,c++})}requestMorePeers(){return new Promise(e=>{for(const n in this.trackers)this.trackers[n].announce(this._defaultAnnounceOpts());e(this.peers)})}getTrackerStats(){let e=0;for(const n in this.trackers)this.trackers[n].socket&&this.trackers[n].socket.connect&&e++;return{connected:e,total:this.announce.length}}destroy(){for(const e in this.peers)for(const n in this.peers[e])this.peers[e][n].destroy();Object.keys(this.trackers).forEach(e=>this.trackers[e].destroy())}_peerRespond(e,n){return t=>this.send(e,t,n)}_chunkHandler(e){return this.msgChunks[e.id]||(this.msgChunks[e.id]=[]),this.msgChunks[e.id][e.c]=e.msg,e.last?this.msgChunks[e.id].join(""):!1}_destroyChunks(e){delete this.msgChunks[e]}_defaultAnnounceOpts(e={}){return e.numwant==null&&(e.numwant=50),e.uploaded==null&&(e.uploaded=0),e.downloaded==null&&(e.downloaded=0),e}_fetchPeers(){for(const e in this.announce)this.trackers[e]=new h(this,this.announce[e]),this.trackers[e].announce(this._defaultAnnounceOpts())}}export{k as P2PT};
